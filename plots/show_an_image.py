import os
import sys
import csv
import torch
import imageio
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from plot_vector_field_tool import plot_vector_field

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), './../')))
from data_prep.data_initializer import DDInitializer
from ddpm.helper_functions.compute_divergence import compute_divergence
from noising_process.incompressible_gp.adding_noise.divergence_free_noise import gaussian_divergence_free_noise, gaussian_each_step_divergence_free_noise, exact_div_free_field_from_stream

# Initialize data and output dir
data_init = DDInitializer()
output_dir = 'noise_images'
os.makedirs(output_dir, exist_ok=True)

# Extract vector components as PyTorch tensors
tensor_to_draw_x = data_init.training_tensor[:, :, 0, 0]
tensor_to_draw_y = data_init.training_tensor[:, :, 1, 0]

if isinstance(tensor_to_draw_x, np.ndarray):
    tensor_to_draw_x = torch.from_numpy(tensor_to_draw_x)
    tensor_to_draw_y = torch.from_numpy(tensor_to_draw_y)

# Rebuild full field tensor in shape (1, 2, H, W) for the noise generator
vec_field_tensor = torch.stack([tensor_to_draw_x, tensor_to_draw_y], dim=0).unsqueeze(0)  # (1, 2, H, W)
shape = vec_field_tensor.shape
#t0 = torch.tensor([500])  # Example timestep
#t1 = torch.tensor([1])  # Example timestep

# Generate divergence-free noise using both methods
#noise_alpha = gaussian_divergence_free_noise(shape, t=t0, device='cpu').squeeze(0)  # (2, H, W)
#noise_beta = gaussian_each_step_divergence_free_noise(shape, t=t1, device='cpu').squeeze(0)  # (2, H, W)

""" Testing
mean_u = noise_beta[0, 0].mean().item()
mean_v = noise_beta[0, 1].mean().item()
print(f"Mean (u): {mean_u}, Mean (v): {mean_v}")
"""

# Plot the original field
#plot_vector_field(tensor_to_draw_x, tensor_to_draw_y, scale=10, file=os.path.join(output_dir, "vector_field.png"))

# Plot noise generated by each method
#plot_vector_field(noise_beta[0], noise_beta[1], scale=10, file=os.path.join(output_dir, "noise_field_beta.png"))



# For saving mean values of noise
csv_path = os.path.join(output_dir, "stream_divs.csv")
with open(csv_path, mode='w', newline='') as csvfile:
    csv_writer = csv.writer(csvfile)
    csv_writer.writerow(['timestep', 'divergence'])

    image_filenames = []

    for i in range(200):
        plot_vector_field(exact_div_free_field_from_stream(44, 94, i)[0], exact_div_free_field_from_stream(44, 94, i)[1], scale=10, file=os.path.join(output_dir, f"stream_{i}.png"))
        filename = os.path.join(output_dir, f"stream_{i}.png")
        image_filenames.append(filename)
        csv_writer.writerow([i, compute_divergence(exact_div_free_field_from_stream(44, 94, i)[0], exact_div_free_field_from_stream(44, 94, i)[1]).mean().item()])

# Create GIF from saved images
gif_path = os.path.join(output_dir, "stream_fields.gif")
with imageio.get_writer(gif_path, mode='I', duration=0.05) as writer:
    for filename in image_filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

# Cleanup
for filename in image_filenames:
    os.remove(filename)


""" Testing alphas. Also weird
for i in range(100):
    ti = torch.tensor([i])  # Example timestep
    noise_alpha = gaussian_divergence_free_noise(shape, t=ti, device='cpu').squeeze(0)  # (2, H, W)
    plot_vector_field(noise_alpha[0], noise_alpha[1], scale=10, file=os.path.join(output_dir, f"noise_field_alpha_{i}.png"))

    # Plot and save noise field image
    filename = os.path.join(output_dir, f"noise_field_alpha_{i}.png")
    image_filenames.append(filename)

# Create GIF from saved images
gif_path = os.path.join(output_dir, "noise_field_alpha_animation.gif")
with imageio.get_writer(gif_path, mode='I', duration=0.05) as writer:
    for filename in image_filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

# Cleanup
for filename in image_filenames:
    os.remove(filename)

"""

"""
# For saving mean values of noise
csv_path = os.path.join(output_dir, "noise_means.csv")
with open(csv_path, mode='w', newline='') as csvfile:
    csv_writer = csv.writer(csvfile)
    csv_writer.writerow(['timestep', 'mean_u', 'mean_v'])

    image_filenames = []


    for i in range(100):
        ti = torch.tensor([i])
        noise_beta = gaussian_each_step_divergence_free_noise(shape, t=ti, device='cpu').squeeze(0)  # (2, H, W)

        mean_u = noise_beta[0, 0].mean().item()
        mean_v = noise_beta[0, 1].mean().item()
        print(f"Mean (u): {mean_u}, Mean (v): {mean_v}")

        # Save means to CSV
        csv_writer.writerow([i, mean_u, mean_v])

        # Plot and save noise field image
        filename = os.path.join(output_dir, f"noise_field_beta_{i:03d}.png")
        plot_vector_field(noise_beta[0], noise_beta[1], scale=10, file=filename)
        image_filenames.append(filename)

# Create GIF from saved images
gif_path = os.path.join(output_dir, "noise_field_beta_animation.gif")
with imageio.get_writer(gif_path, mode='I', duration=0.05) as writer:
    for filename in image_filenames:
        image = imageio.imread(filename)
        writer.append_data(image)

# Cleanup
for filename in image_filenames:
    os.remove(filename)
"""